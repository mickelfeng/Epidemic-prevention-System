// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/pwh-pwh/Epidemic-prevention-System/dao/models"
)

func newAccessReturn(db *gorm.DB, opts ...gen.DOOption) accessReturn {
	_accessReturn := accessReturn{}

	_accessReturn.accessReturnDo.UseDB(db, opts...)
	_accessReturn.accessReturnDo.UseModel(&models.AccessReturn{})

	tableName := _accessReturn.accessReturnDo.TableName()
	_accessReturn.ALL = field.NewAsterisk(tableName)
	_accessReturn.ID = field.NewInt64(tableName, "id")
	_accessReturn.Name = field.NewString(tableName, "name")
	_accessReturn.Phone = field.NewString(tableName, "phone")
	_accessReturn.Card = field.NewString(tableName, "card")
	_accessReturn.Remark = field.NewString(tableName, "remark")
	_accessReturn.Dept = field.NewString(tableName, "dept")
	_accessReturn.CreateTime = field.NewTime(tableName, "create_time")

	_accessReturn.fillFieldMap()

	return _accessReturn
}

type accessReturn struct {
	accessReturnDo accessReturnDo

	ALL        field.Asterisk
	ID         field.Int64  // 自增id
	Name       field.String // 姓名
	Phone      field.String // 手机号码
	Card       field.String // 身份证号码
	Remark     field.String // 备注
	Dept       field.String // 部门
	CreateTime field.Time   // 创建时间

	fieldMap map[string]field.Expr
}

func (a accessReturn) Table(newTableName string) *accessReturn {
	a.accessReturnDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a accessReturn) As(alias string) *accessReturn {
	a.accessReturnDo.DO = *(a.accessReturnDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *accessReturn) updateTableName(table string) *accessReturn {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.Name = field.NewString(table, "name")
	a.Phone = field.NewString(table, "phone")
	a.Card = field.NewString(table, "card")
	a.Remark = field.NewString(table, "remark")
	a.Dept = field.NewString(table, "dept")
	a.CreateTime = field.NewTime(table, "create_time")

	a.fillFieldMap()

	return a
}

func (a *accessReturn) WithContext(ctx context.Context) *accessReturnDo {
	return a.accessReturnDo.WithContext(ctx)
}

func (a accessReturn) TableName() string { return a.accessReturnDo.TableName() }

func (a accessReturn) Alias() string { return a.accessReturnDo.Alias() }

func (a *accessReturn) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *accessReturn) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 7)
	a.fieldMap["id"] = a.ID
	a.fieldMap["name"] = a.Name
	a.fieldMap["phone"] = a.Phone
	a.fieldMap["card"] = a.Card
	a.fieldMap["remark"] = a.Remark
	a.fieldMap["dept"] = a.Dept
	a.fieldMap["create_time"] = a.CreateTime
}

func (a accessReturn) clone(db *gorm.DB) accessReturn {
	a.accessReturnDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a accessReturn) replaceDB(db *gorm.DB) accessReturn {
	a.accessReturnDo.ReplaceDB(db)
	return a
}

type accessReturnDo struct{ gen.DO }

func (a accessReturnDo) Debug() *accessReturnDo {
	return a.withDO(a.DO.Debug())
}

func (a accessReturnDo) WithContext(ctx context.Context) *accessReturnDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a accessReturnDo) ReadDB() *accessReturnDo {
	return a.Clauses(dbresolver.Read)
}

func (a accessReturnDo) WriteDB() *accessReturnDo {
	return a.Clauses(dbresolver.Write)
}

func (a accessReturnDo) Session(config *gorm.Session) *accessReturnDo {
	return a.withDO(a.DO.Session(config))
}

func (a accessReturnDo) Clauses(conds ...clause.Expression) *accessReturnDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a accessReturnDo) Returning(value interface{}, columns ...string) *accessReturnDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a accessReturnDo) Not(conds ...gen.Condition) *accessReturnDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a accessReturnDo) Or(conds ...gen.Condition) *accessReturnDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a accessReturnDo) Select(conds ...field.Expr) *accessReturnDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a accessReturnDo) Where(conds ...gen.Condition) *accessReturnDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a accessReturnDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *accessReturnDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a accessReturnDo) Order(conds ...field.Expr) *accessReturnDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a accessReturnDo) Distinct(cols ...field.Expr) *accessReturnDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a accessReturnDo) Omit(cols ...field.Expr) *accessReturnDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a accessReturnDo) Join(table schema.Tabler, on ...field.Expr) *accessReturnDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a accessReturnDo) LeftJoin(table schema.Tabler, on ...field.Expr) *accessReturnDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a accessReturnDo) RightJoin(table schema.Tabler, on ...field.Expr) *accessReturnDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a accessReturnDo) Group(cols ...field.Expr) *accessReturnDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a accessReturnDo) Having(conds ...gen.Condition) *accessReturnDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a accessReturnDo) Limit(limit int) *accessReturnDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a accessReturnDo) Offset(offset int) *accessReturnDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a accessReturnDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *accessReturnDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a accessReturnDo) Unscoped() *accessReturnDo {
	return a.withDO(a.DO.Unscoped())
}

func (a accessReturnDo) Create(values ...*models.AccessReturn) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a accessReturnDo) CreateInBatches(values []*models.AccessReturn, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a accessReturnDo) Save(values ...*models.AccessReturn) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a accessReturnDo) First() (*models.AccessReturn, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.AccessReturn), nil
	}
}

func (a accessReturnDo) Take() (*models.AccessReturn, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.AccessReturn), nil
	}
}

func (a accessReturnDo) Last() (*models.AccessReturn, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.AccessReturn), nil
	}
}

func (a accessReturnDo) Find() ([]*models.AccessReturn, error) {
	result, err := a.DO.Find()
	return result.([]*models.AccessReturn), err
}

func (a accessReturnDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.AccessReturn, err error) {
	buf := make([]*models.AccessReturn, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a accessReturnDo) FindInBatches(result *[]*models.AccessReturn, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a accessReturnDo) Attrs(attrs ...field.AssignExpr) *accessReturnDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a accessReturnDo) Assign(attrs ...field.AssignExpr) *accessReturnDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a accessReturnDo) Joins(fields ...field.RelationField) *accessReturnDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a accessReturnDo) Preload(fields ...field.RelationField) *accessReturnDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a accessReturnDo) FirstOrInit() (*models.AccessReturn, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.AccessReturn), nil
	}
}

func (a accessReturnDo) FirstOrCreate() (*models.AccessReturn, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.AccessReturn), nil
	}
}

func (a accessReturnDo) FindByPage(offset int, limit int) (result []*models.AccessReturn, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a accessReturnDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a accessReturnDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a accessReturnDo) Delete(models ...*models.AccessReturn) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *accessReturnDo) withDO(do gen.Dao) *accessReturnDo {
	a.DO = *do.(*gen.DO)
	return a
}
