// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/pwh-pwh/Epidemic-prevention-System/dao/models"
)

func newGoodInfo(db *gorm.DB, opts ...gen.DOOption) goodInfo {
	_goodInfo := goodInfo{}

	_goodInfo.goodInfoDo.UseDB(db, opts...)
	_goodInfo.goodInfoDo.UseModel(&models.GoodInfo{})

	tableName := _goodInfo.goodInfoDo.TableName()
	_goodInfo.ALL = field.NewAsterisk(tableName)
	_goodInfo.ID = field.NewInt64(tableName, "id")
	_goodInfo.TypeID = field.NewInt64(tableName, "type_id")
	_goodInfo.Name = field.NewString(tableName, "name")
	_goodInfo.Img = field.NewString(tableName, "img")
	_goodInfo.Size = field.NewString(tableName, "size")
	_goodInfo.Unit = field.NewString(tableName, "unit")
	_goodInfo.CreateBy = field.NewString(tableName, "create_by")
	_goodInfo.Remark = field.NewString(tableName, "remark")
	_goodInfo.Total = field.NewInt32(tableName, "total")
	_goodInfo.Status = field.NewInt32(tableName, "status")
	_goodInfo.CreateTime = field.NewTime(tableName, "create_time")
	_goodInfo.UpdateTime = field.NewTime(tableName, "update_time")
	_goodInfo.IsDelete = field.NewInt32(tableName, "is_delete")
	_goodInfo.Version = field.NewInt32(tableName, "version")

	_goodInfo.fillFieldMap()

	return _goodInfo
}

type goodInfo struct {
	goodInfoDo goodInfoDo

	ALL        field.Asterisk
	ID         field.Int64  // 物资信息id
	TypeID     field.Int64  // 类型id
	Name       field.String // 物资名称
	Img        field.String // 图片链接
	Size       field.String // 物资规格
	Unit       field.String // 物资单位
	CreateBy   field.String // 创建人
	Remark     field.String // 备注
	Total      field.Int32  // 库存
	Status     field.Int32  // 是否启用
	CreateTime field.Time   // 创建时间
	UpdateTime field.Time   // 更新时间
	IsDelete   field.Int32  // 逻辑删除
	Version    field.Int32  // 乐观锁

	fieldMap map[string]field.Expr
}

func (g goodInfo) Table(newTableName string) *goodInfo {
	g.goodInfoDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g goodInfo) As(alias string) *goodInfo {
	g.goodInfoDo.DO = *(g.goodInfoDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *goodInfo) updateTableName(table string) *goodInfo {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt64(table, "id")
	g.TypeID = field.NewInt64(table, "type_id")
	g.Name = field.NewString(table, "name")
	g.Img = field.NewString(table, "img")
	g.Size = field.NewString(table, "size")
	g.Unit = field.NewString(table, "unit")
	g.CreateBy = field.NewString(table, "create_by")
	g.Remark = field.NewString(table, "remark")
	g.Total = field.NewInt32(table, "total")
	g.Status = field.NewInt32(table, "status")
	g.CreateTime = field.NewTime(table, "create_time")
	g.UpdateTime = field.NewTime(table, "update_time")
	g.IsDelete = field.NewInt32(table, "is_delete")
	g.Version = field.NewInt32(table, "version")

	g.fillFieldMap()

	return g
}

func (g *goodInfo) WithContext(ctx context.Context) *goodInfoDo { return g.goodInfoDo.WithContext(ctx) }

func (g goodInfo) TableName() string { return g.goodInfoDo.TableName() }

func (g goodInfo) Alias() string { return g.goodInfoDo.Alias() }

func (g *goodInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *goodInfo) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 14)
	g.fieldMap["id"] = g.ID
	g.fieldMap["type_id"] = g.TypeID
	g.fieldMap["name"] = g.Name
	g.fieldMap["img"] = g.Img
	g.fieldMap["size"] = g.Size
	g.fieldMap["unit"] = g.Unit
	g.fieldMap["create_by"] = g.CreateBy
	g.fieldMap["remark"] = g.Remark
	g.fieldMap["total"] = g.Total
	g.fieldMap["status"] = g.Status
	g.fieldMap["create_time"] = g.CreateTime
	g.fieldMap["update_time"] = g.UpdateTime
	g.fieldMap["is_delete"] = g.IsDelete
	g.fieldMap["version"] = g.Version
}

func (g goodInfo) clone(db *gorm.DB) goodInfo {
	g.goodInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g goodInfo) replaceDB(db *gorm.DB) goodInfo {
	g.goodInfoDo.ReplaceDB(db)
	return g
}

type goodInfoDo struct{ gen.DO }

func (g goodInfoDo) Debug() *goodInfoDo {
	return g.withDO(g.DO.Debug())
}

func (g goodInfoDo) WithContext(ctx context.Context) *goodInfoDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g goodInfoDo) ReadDB() *goodInfoDo {
	return g.Clauses(dbresolver.Read)
}

func (g goodInfoDo) WriteDB() *goodInfoDo {
	return g.Clauses(dbresolver.Write)
}

func (g goodInfoDo) Session(config *gorm.Session) *goodInfoDo {
	return g.withDO(g.DO.Session(config))
}

func (g goodInfoDo) Clauses(conds ...clause.Expression) *goodInfoDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g goodInfoDo) Returning(value interface{}, columns ...string) *goodInfoDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g goodInfoDo) Not(conds ...gen.Condition) *goodInfoDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g goodInfoDo) Or(conds ...gen.Condition) *goodInfoDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g goodInfoDo) Select(conds ...field.Expr) *goodInfoDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g goodInfoDo) Where(conds ...gen.Condition) *goodInfoDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g goodInfoDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *goodInfoDo {
	return g.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (g goodInfoDo) Order(conds ...field.Expr) *goodInfoDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g goodInfoDo) Distinct(cols ...field.Expr) *goodInfoDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g goodInfoDo) Omit(cols ...field.Expr) *goodInfoDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g goodInfoDo) Join(table schema.Tabler, on ...field.Expr) *goodInfoDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g goodInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) *goodInfoDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g goodInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) *goodInfoDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g goodInfoDo) Group(cols ...field.Expr) *goodInfoDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g goodInfoDo) Having(conds ...gen.Condition) *goodInfoDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g goodInfoDo) Limit(limit int) *goodInfoDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g goodInfoDo) Offset(offset int) *goodInfoDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g goodInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *goodInfoDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g goodInfoDo) Unscoped() *goodInfoDo {
	return g.withDO(g.DO.Unscoped())
}

func (g goodInfoDo) Create(values ...*models.GoodInfo) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g goodInfoDo) CreateInBatches(values []*models.GoodInfo, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g goodInfoDo) Save(values ...*models.GoodInfo) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g goodInfoDo) First() (*models.GoodInfo, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.GoodInfo), nil
	}
}

func (g goodInfoDo) Take() (*models.GoodInfo, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.GoodInfo), nil
	}
}

func (g goodInfoDo) Last() (*models.GoodInfo, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.GoodInfo), nil
	}
}

func (g goodInfoDo) Find() ([]*models.GoodInfo, error) {
	result, err := g.DO.Find()
	return result.([]*models.GoodInfo), err
}

func (g goodInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.GoodInfo, err error) {
	buf := make([]*models.GoodInfo, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g goodInfoDo) FindInBatches(result *[]*models.GoodInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g goodInfoDo) Attrs(attrs ...field.AssignExpr) *goodInfoDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g goodInfoDo) Assign(attrs ...field.AssignExpr) *goodInfoDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g goodInfoDo) Joins(fields ...field.RelationField) *goodInfoDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g goodInfoDo) Preload(fields ...field.RelationField) *goodInfoDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g goodInfoDo) FirstOrInit() (*models.GoodInfo, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.GoodInfo), nil
	}
}

func (g goodInfoDo) FirstOrCreate() (*models.GoodInfo, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.GoodInfo), nil
	}
}

func (g goodInfoDo) FindByPage(offset int, limit int) (result []*models.GoodInfo, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g goodInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g goodInfoDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g goodInfoDo) Delete(models ...*models.GoodInfo) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *goodInfoDo) withDO(do gen.Dao) *goodInfoDo {
	g.DO = *do.(*gen.DO)
	return g
}
