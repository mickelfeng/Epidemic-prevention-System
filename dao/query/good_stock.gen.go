// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/pwh-pwh/Epidemic-prevention-System/dao/models"
)

func newGoodStock(db *gorm.DB, opts ...gen.DOOption) goodStock {
	_goodStock := goodStock{}

	_goodStock.goodStockDo.UseDB(db, opts...)
	_goodStock.goodStockDo.UseModel(&models.GoodStock{})

	tableName := _goodStock.goodStockDo.TableName()
	_goodStock.ALL = field.NewAsterisk(tableName)
	_goodStock.ID = field.NewInt64(tableName, "id")
	_goodStock.Accept = field.NewString(tableName, "accept")
	_goodStock.CreateBy = field.NewString(tableName, "create_by")
	_goodStock.GoodNum = field.NewInt32(tableName, "good_num")
	_goodStock.GoodSize = field.NewString(tableName, "good_size")
	_goodStock.GoodName = field.NewString(tableName, "good_name")
	_goodStock.PeopleName = field.NewString(tableName, "people_name")
	_goodStock.PeoplePhone = field.NewString(tableName, "people_phone")
	_goodStock.OperateType = field.NewInt32(tableName, "operate_type")
	_goodStock.Remark = field.NewString(tableName, "remark")
	_goodStock.CreateTime = field.NewTime(tableName, "create_time")
	_goodStock.UpdateTime = field.NewTime(tableName, "update_time")
	_goodStock.IsDelete = field.NewInt32(tableName, "is_delete")
	_goodStock.Version = field.NewInt32(tableName, "version")

	_goodStock.fillFieldMap()

	return _goodStock
}

type goodStock struct {
	goodStockDo goodStockDo

	ALL         field.Asterisk
	ID          field.Int64  // 出入库信息id
	Accept      field.String // 去向
	CreateBy    field.String // 操作人
	GoodNum     field.Int32  // 物资数量
	GoodSize    field.String // 物资规格
	GoodName    field.String // 物资名
	PeopleName  field.String // 联系人
	PeoplePhone field.String // 联系人电话
	OperateType field.Int32  // 操作类型
	Remark      field.String // 备注
	CreateTime  field.Time   // 创建时间
	UpdateTime  field.Time   // 更新时间
	IsDelete    field.Int32  // 逻辑删除
	Version     field.Int32  // 乐观锁

	fieldMap map[string]field.Expr
}

func (g goodStock) Table(newTableName string) *goodStock {
	g.goodStockDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g goodStock) As(alias string) *goodStock {
	g.goodStockDo.DO = *(g.goodStockDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *goodStock) updateTableName(table string) *goodStock {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt64(table, "id")
	g.Accept = field.NewString(table, "accept")
	g.CreateBy = field.NewString(table, "create_by")
	g.GoodNum = field.NewInt32(table, "good_num")
	g.GoodSize = field.NewString(table, "good_size")
	g.GoodName = field.NewString(table, "good_name")
	g.PeopleName = field.NewString(table, "people_name")
	g.PeoplePhone = field.NewString(table, "people_phone")
	g.OperateType = field.NewInt32(table, "operate_type")
	g.Remark = field.NewString(table, "remark")
	g.CreateTime = field.NewTime(table, "create_time")
	g.UpdateTime = field.NewTime(table, "update_time")
	g.IsDelete = field.NewInt32(table, "is_delete")
	g.Version = field.NewInt32(table, "version")

	g.fillFieldMap()

	return g
}

func (g *goodStock) WithContext(ctx context.Context) *goodStockDo {
	return g.goodStockDo.WithContext(ctx)
}

func (g goodStock) TableName() string { return g.goodStockDo.TableName() }

func (g goodStock) Alias() string { return g.goodStockDo.Alias() }

func (g *goodStock) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *goodStock) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 14)
	g.fieldMap["id"] = g.ID
	g.fieldMap["accept"] = g.Accept
	g.fieldMap["create_by"] = g.CreateBy
	g.fieldMap["good_num"] = g.GoodNum
	g.fieldMap["good_size"] = g.GoodSize
	g.fieldMap["good_name"] = g.GoodName
	g.fieldMap["people_name"] = g.PeopleName
	g.fieldMap["people_phone"] = g.PeoplePhone
	g.fieldMap["operate_type"] = g.OperateType
	g.fieldMap["remark"] = g.Remark
	g.fieldMap["create_time"] = g.CreateTime
	g.fieldMap["update_time"] = g.UpdateTime
	g.fieldMap["is_delete"] = g.IsDelete
	g.fieldMap["version"] = g.Version
}

func (g goodStock) clone(db *gorm.DB) goodStock {
	g.goodStockDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g goodStock) replaceDB(db *gorm.DB) goodStock {
	g.goodStockDo.ReplaceDB(db)
	return g
}

type goodStockDo struct{ gen.DO }

func (g goodStockDo) Debug() *goodStockDo {
	return g.withDO(g.DO.Debug())
}

func (g goodStockDo) WithContext(ctx context.Context) *goodStockDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g goodStockDo) ReadDB() *goodStockDo {
	return g.Clauses(dbresolver.Read)
}

func (g goodStockDo) WriteDB() *goodStockDo {
	return g.Clauses(dbresolver.Write)
}

func (g goodStockDo) Session(config *gorm.Session) *goodStockDo {
	return g.withDO(g.DO.Session(config))
}

func (g goodStockDo) Clauses(conds ...clause.Expression) *goodStockDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g goodStockDo) Returning(value interface{}, columns ...string) *goodStockDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g goodStockDo) Not(conds ...gen.Condition) *goodStockDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g goodStockDo) Or(conds ...gen.Condition) *goodStockDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g goodStockDo) Select(conds ...field.Expr) *goodStockDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g goodStockDo) Where(conds ...gen.Condition) *goodStockDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g goodStockDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *goodStockDo {
	return g.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (g goodStockDo) Order(conds ...field.Expr) *goodStockDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g goodStockDo) Distinct(cols ...field.Expr) *goodStockDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g goodStockDo) Omit(cols ...field.Expr) *goodStockDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g goodStockDo) Join(table schema.Tabler, on ...field.Expr) *goodStockDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g goodStockDo) LeftJoin(table schema.Tabler, on ...field.Expr) *goodStockDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g goodStockDo) RightJoin(table schema.Tabler, on ...field.Expr) *goodStockDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g goodStockDo) Group(cols ...field.Expr) *goodStockDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g goodStockDo) Having(conds ...gen.Condition) *goodStockDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g goodStockDo) Limit(limit int) *goodStockDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g goodStockDo) Offset(offset int) *goodStockDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g goodStockDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *goodStockDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g goodStockDo) Unscoped() *goodStockDo {
	return g.withDO(g.DO.Unscoped())
}

func (g goodStockDo) Create(values ...*models.GoodStock) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g goodStockDo) CreateInBatches(values []*models.GoodStock, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g goodStockDo) Save(values ...*models.GoodStock) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g goodStockDo) First() (*models.GoodStock, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.GoodStock), nil
	}
}

func (g goodStockDo) Take() (*models.GoodStock, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.GoodStock), nil
	}
}

func (g goodStockDo) Last() (*models.GoodStock, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.GoodStock), nil
	}
}

func (g goodStockDo) Find() ([]*models.GoodStock, error) {
	result, err := g.DO.Find()
	return result.([]*models.GoodStock), err
}

func (g goodStockDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.GoodStock, err error) {
	buf := make([]*models.GoodStock, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g goodStockDo) FindInBatches(result *[]*models.GoodStock, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g goodStockDo) Attrs(attrs ...field.AssignExpr) *goodStockDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g goodStockDo) Assign(attrs ...field.AssignExpr) *goodStockDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g goodStockDo) Joins(fields ...field.RelationField) *goodStockDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g goodStockDo) Preload(fields ...field.RelationField) *goodStockDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g goodStockDo) FirstOrInit() (*models.GoodStock, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.GoodStock), nil
	}
}

func (g goodStockDo) FirstOrCreate() (*models.GoodStock, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.GoodStock), nil
	}
}

func (g goodStockDo) FindByPage(offset int, limit int) (result []*models.GoodStock, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g goodStockDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g goodStockDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g goodStockDo) Delete(models ...*models.GoodStock) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *goodStockDo) withDO(do gen.Dao) *goodStockDo {
	g.DO = *do.(*gen.DO)
	return g
}
