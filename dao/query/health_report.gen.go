// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/pwh-pwh/Epidemic-prevention-System/dao/models"
)

func newHealthReport(db *gorm.DB, opts ...gen.DOOption) healthReport {
	_healthReport := healthReport{}

	_healthReport.healthReportDo.UseDB(db, opts...)
	_healthReport.healthReportDo.UseModel(&models.HealthReport{})

	tableName := _healthReport.healthReportDo.TableName()
	_healthReport.ALL = field.NewAsterisk(tableName)
	_healthReport.ID = field.NewInt64(tableName, "id")
	_healthReport.Username = field.NewString(tableName, "username")
	_healthReport.DeptID = field.NewInt64(tableName, "dept_id")
	_healthReport.PhoneNumber = field.NewString(tableName, "phone_number")
	_healthReport.Img3 = field.NewString(tableName, "img3")
	_healthReport.Img2 = field.NewString(tableName, "img2")
	_healthReport.Img1 = field.NewString(tableName, "img1")
	_healthReport.Type = field.NewInt32(tableName, "type")
	_healthReport.CreateTime = field.NewTime(tableName, "create_time")
	_healthReport.UpdateTime = field.NewTime(tableName, "update_time")

	_healthReport.fillFieldMap()

	return _healthReport
}

type healthReport struct {
	healthReportDo healthReportDo

	ALL         field.Asterisk
	ID          field.Int64  // 自增id
	Username    field.String // 用户名
	DeptID      field.Int64  // 部门id
	PhoneNumber field.String // 手机号
	Img3        field.String // 核酸报告
	Img2        field.String // 行程码
	Img1        field.String // 健康码
	Type        field.Int32  // 返校情况
	CreateTime  field.Time   // 创建时间
	UpdateTime  field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (h healthReport) Table(newTableName string) *healthReport {
	h.healthReportDo.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h healthReport) As(alias string) *healthReport {
	h.healthReportDo.DO = *(h.healthReportDo.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *healthReport) updateTableName(table string) *healthReport {
	h.ALL = field.NewAsterisk(table)
	h.ID = field.NewInt64(table, "id")
	h.Username = field.NewString(table, "username")
	h.DeptID = field.NewInt64(table, "dept_id")
	h.PhoneNumber = field.NewString(table, "phone_number")
	h.Img3 = field.NewString(table, "img3")
	h.Img2 = field.NewString(table, "img2")
	h.Img1 = field.NewString(table, "img1")
	h.Type = field.NewInt32(table, "type")
	h.CreateTime = field.NewTime(table, "create_time")
	h.UpdateTime = field.NewTime(table, "update_time")

	h.fillFieldMap()

	return h
}

func (h *healthReport) WithContext(ctx context.Context) *healthReportDo {
	return h.healthReportDo.WithContext(ctx)
}

func (h healthReport) TableName() string { return h.healthReportDo.TableName() }

func (h healthReport) Alias() string { return h.healthReportDo.Alias() }

func (h *healthReport) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *healthReport) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 10)
	h.fieldMap["id"] = h.ID
	h.fieldMap["username"] = h.Username
	h.fieldMap["dept_id"] = h.DeptID
	h.fieldMap["phone_number"] = h.PhoneNumber
	h.fieldMap["img3"] = h.Img3
	h.fieldMap["img2"] = h.Img2
	h.fieldMap["img1"] = h.Img1
	h.fieldMap["type"] = h.Type
	h.fieldMap["create_time"] = h.CreateTime
	h.fieldMap["update_time"] = h.UpdateTime
}

func (h healthReport) clone(db *gorm.DB) healthReport {
	h.healthReportDo.ReplaceConnPool(db.Statement.ConnPool)
	return h
}

func (h healthReport) replaceDB(db *gorm.DB) healthReport {
	h.healthReportDo.ReplaceDB(db)
	return h
}

type healthReportDo struct{ gen.DO }

func (h healthReportDo) Debug() *healthReportDo {
	return h.withDO(h.DO.Debug())
}

func (h healthReportDo) WithContext(ctx context.Context) *healthReportDo {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h healthReportDo) ReadDB() *healthReportDo {
	return h.Clauses(dbresolver.Read)
}

func (h healthReportDo) WriteDB() *healthReportDo {
	return h.Clauses(dbresolver.Write)
}

func (h healthReportDo) Session(config *gorm.Session) *healthReportDo {
	return h.withDO(h.DO.Session(config))
}

func (h healthReportDo) Clauses(conds ...clause.Expression) *healthReportDo {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h healthReportDo) Returning(value interface{}, columns ...string) *healthReportDo {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h healthReportDo) Not(conds ...gen.Condition) *healthReportDo {
	return h.withDO(h.DO.Not(conds...))
}

func (h healthReportDo) Or(conds ...gen.Condition) *healthReportDo {
	return h.withDO(h.DO.Or(conds...))
}

func (h healthReportDo) Select(conds ...field.Expr) *healthReportDo {
	return h.withDO(h.DO.Select(conds...))
}

func (h healthReportDo) Where(conds ...gen.Condition) *healthReportDo {
	return h.withDO(h.DO.Where(conds...))
}

func (h healthReportDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *healthReportDo {
	return h.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (h healthReportDo) Order(conds ...field.Expr) *healthReportDo {
	return h.withDO(h.DO.Order(conds...))
}

func (h healthReportDo) Distinct(cols ...field.Expr) *healthReportDo {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h healthReportDo) Omit(cols ...field.Expr) *healthReportDo {
	return h.withDO(h.DO.Omit(cols...))
}

func (h healthReportDo) Join(table schema.Tabler, on ...field.Expr) *healthReportDo {
	return h.withDO(h.DO.Join(table, on...))
}

func (h healthReportDo) LeftJoin(table schema.Tabler, on ...field.Expr) *healthReportDo {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h healthReportDo) RightJoin(table schema.Tabler, on ...field.Expr) *healthReportDo {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h healthReportDo) Group(cols ...field.Expr) *healthReportDo {
	return h.withDO(h.DO.Group(cols...))
}

func (h healthReportDo) Having(conds ...gen.Condition) *healthReportDo {
	return h.withDO(h.DO.Having(conds...))
}

func (h healthReportDo) Limit(limit int) *healthReportDo {
	return h.withDO(h.DO.Limit(limit))
}

func (h healthReportDo) Offset(offset int) *healthReportDo {
	return h.withDO(h.DO.Offset(offset))
}

func (h healthReportDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *healthReportDo {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h healthReportDo) Unscoped() *healthReportDo {
	return h.withDO(h.DO.Unscoped())
}

func (h healthReportDo) Create(values ...*models.HealthReport) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h healthReportDo) CreateInBatches(values []*models.HealthReport, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h healthReportDo) Save(values ...*models.HealthReport) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h healthReportDo) First() (*models.HealthReport, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.HealthReport), nil
	}
}

func (h healthReportDo) Take() (*models.HealthReport, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.HealthReport), nil
	}
}

func (h healthReportDo) Last() (*models.HealthReport, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.HealthReport), nil
	}
}

func (h healthReportDo) Find() ([]*models.HealthReport, error) {
	result, err := h.DO.Find()
	return result.([]*models.HealthReport), err
}

func (h healthReportDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.HealthReport, err error) {
	buf := make([]*models.HealthReport, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h healthReportDo) FindInBatches(result *[]*models.HealthReport, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h healthReportDo) Attrs(attrs ...field.AssignExpr) *healthReportDo {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h healthReportDo) Assign(attrs ...field.AssignExpr) *healthReportDo {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h healthReportDo) Joins(fields ...field.RelationField) *healthReportDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h healthReportDo) Preload(fields ...field.RelationField) *healthReportDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h healthReportDo) FirstOrInit() (*models.HealthReport, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.HealthReport), nil
	}
}

func (h healthReportDo) FirstOrCreate() (*models.HealthReport, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.HealthReport), nil
	}
}

func (h healthReportDo) FindByPage(offset int, limit int) (result []*models.HealthReport, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h healthReportDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h healthReportDo) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h healthReportDo) Delete(models ...*models.HealthReport) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *healthReportDo) withDO(do gen.Dao) *healthReportDo {
	h.DO = *do.(*gen.DO)
	return h
}
