// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"github.com/pwh-pwh/Epidemic-prevention-System/models"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newGoodType(db *gorm.DB, opts ...gen.DOOption) goodType {
	_goodType := goodType{}

	_goodType.goodTypeDo.UseDB(db, opts...)
	_goodType.goodTypeDo.UseModel(&models.GoodType{})

	tableName := _goodType.goodTypeDo.TableName()
	_goodType.ALL = field.NewAsterisk(tableName)
	_goodType.ID = field.NewInt64(tableName, "id")
	_goodType.Type = field.NewString(tableName, "type")
	_goodType.OrderNum = field.NewInt32(tableName, "order_num")
	_goodType.Status = field.NewInt32(tableName, "status")
	_goodType.CreateBy = field.NewString(tableName, "create_by")
	_goodType.CreateTime = field.NewTime(tableName, "create_time")
	_goodType.UpdateTime = field.NewTime(tableName, "update_time")
	_goodType.IsDelete = field.NewInt32(tableName, "is_delete")
	_goodType.Version = field.NewInt32(tableName, "version")
	_goodType.Remark = field.NewString(tableName, "remark")

	_goodType.fillFieldMap()

	return _goodType
}

type goodType struct {
	goodTypeDo goodTypeDo

	ALL        field.Asterisk
	ID         field.Int64  // 物资类型id
	Type       field.String // 物资类型
	OrderNum   field.Int32  // 排序
	Status     field.Int32  // 状态
	CreateBy   field.String // 创建人
	CreateTime field.Time   // 创建时间
	UpdateTime field.Time   // 更新时间
	IsDelete   field.Int32  // 逻辑删除
	Version    field.Int32  // 乐观锁
	Remark     field.String // 备注

	fieldMap map[string]field.Expr
}

func (g goodType) Table(newTableName string) *goodType {
	g.goodTypeDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g goodType) As(alias string) *goodType {
	g.goodTypeDo.DO = *(g.goodTypeDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *goodType) updateTableName(table string) *goodType {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt64(table, "id")
	g.Type = field.NewString(table, "type")
	g.OrderNum = field.NewInt32(table, "order_num")
	g.Status = field.NewInt32(table, "status")
	g.CreateBy = field.NewString(table, "create_by")
	g.CreateTime = field.NewTime(table, "create_time")
	g.UpdateTime = field.NewTime(table, "update_time")
	g.IsDelete = field.NewInt32(table, "is_delete")
	g.Version = field.NewInt32(table, "version")
	g.Remark = field.NewString(table, "remark")

	g.fillFieldMap()

	return g
}

func (g *goodType) WithContext(ctx context.Context) *goodTypeDo { return g.goodTypeDo.WithContext(ctx) }

func (g goodType) TableName() string { return g.goodTypeDo.TableName() }

func (g goodType) Alias() string { return g.goodTypeDo.Alias() }

func (g *goodType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *goodType) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 10)
	g.fieldMap["id"] = g.ID
	g.fieldMap["type"] = g.Type
	g.fieldMap["order_num"] = g.OrderNum
	g.fieldMap["status"] = g.Status
	g.fieldMap["create_by"] = g.CreateBy
	g.fieldMap["create_time"] = g.CreateTime
	g.fieldMap["update_time"] = g.UpdateTime
	g.fieldMap["is_delete"] = g.IsDelete
	g.fieldMap["version"] = g.Version
	g.fieldMap["remark"] = g.Remark
}

func (g goodType) clone(db *gorm.DB) goodType {
	g.goodTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g goodType) replaceDB(db *gorm.DB) goodType {
	g.goodTypeDo.ReplaceDB(db)
	return g
}

type goodTypeDo struct{ gen.DO }

func (g goodTypeDo) Debug() *goodTypeDo {
	return g.withDO(g.DO.Debug())
}

func (g goodTypeDo) WithContext(ctx context.Context) *goodTypeDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g goodTypeDo) ReadDB() *goodTypeDo {
	return g.Clauses(dbresolver.Read)
}

func (g goodTypeDo) WriteDB() *goodTypeDo {
	return g.Clauses(dbresolver.Write)
}

func (g goodTypeDo) Session(config *gorm.Session) *goodTypeDo {
	return g.withDO(g.DO.Session(config))
}

func (g goodTypeDo) Clauses(conds ...clause.Expression) *goodTypeDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g goodTypeDo) Returning(value interface{}, columns ...string) *goodTypeDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g goodTypeDo) Not(conds ...gen.Condition) *goodTypeDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g goodTypeDo) Or(conds ...gen.Condition) *goodTypeDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g goodTypeDo) Select(conds ...field.Expr) *goodTypeDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g goodTypeDo) Where(conds ...gen.Condition) *goodTypeDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g goodTypeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *goodTypeDo {
	return g.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (g goodTypeDo) Order(conds ...field.Expr) *goodTypeDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g goodTypeDo) Distinct(cols ...field.Expr) *goodTypeDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g goodTypeDo) Omit(cols ...field.Expr) *goodTypeDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g goodTypeDo) Join(table schema.Tabler, on ...field.Expr) *goodTypeDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g goodTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *goodTypeDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g goodTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) *goodTypeDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g goodTypeDo) Group(cols ...field.Expr) *goodTypeDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g goodTypeDo) Having(conds ...gen.Condition) *goodTypeDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g goodTypeDo) Limit(limit int) *goodTypeDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g goodTypeDo) Offset(offset int) *goodTypeDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g goodTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *goodTypeDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g goodTypeDo) Unscoped() *goodTypeDo {
	return g.withDO(g.DO.Unscoped())
}

func (g goodTypeDo) Create(values ...*models.GoodType) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g goodTypeDo) CreateInBatches(values []*models.GoodType, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g goodTypeDo) Save(values ...*models.GoodType) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g goodTypeDo) First() (*models.GoodType, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.GoodType), nil
	}
}

func (g goodTypeDo) Take() (*models.GoodType, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.GoodType), nil
	}
}

func (g goodTypeDo) Last() (*models.GoodType, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.GoodType), nil
	}
}

func (g goodTypeDo) Find() ([]*models.GoodType, error) {
	result, err := g.DO.Find()
	return result.([]*models.GoodType), err
}

func (g goodTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.GoodType, err error) {
	buf := make([]*models.GoodType, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g goodTypeDo) FindInBatches(result *[]*models.GoodType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g goodTypeDo) Attrs(attrs ...field.AssignExpr) *goodTypeDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g goodTypeDo) Assign(attrs ...field.AssignExpr) *goodTypeDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g goodTypeDo) Joins(fields ...field.RelationField) *goodTypeDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g goodTypeDo) Preload(fields ...field.RelationField) *goodTypeDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g goodTypeDo) FirstOrInit() (*models.GoodType, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.GoodType), nil
	}
}

func (g goodTypeDo) FirstOrCreate() (*models.GoodType, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.GoodType), nil
	}
}

func (g goodTypeDo) FindByPage(offset int, limit int) (result []*models.GoodType, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g goodTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g goodTypeDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g goodTypeDo) Delete(models ...*models.GoodType) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *goodTypeDo) withDO(do gen.Dao) *goodTypeDo {
	g.DO = *do.(*gen.DO)
	return g
}
