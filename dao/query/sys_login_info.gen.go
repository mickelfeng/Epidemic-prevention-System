// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"github.com/pwh-pwh/Epidemic-prevention-System/models"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newSysLoginInfo(db *gorm.DB, opts ...gen.DOOption) sysLoginInfo {
	_sysLoginInfo := sysLoginInfo{}

	_sysLoginInfo.sysLoginInfoDo.UseDB(db, opts...)
	_sysLoginInfo.sysLoginInfoDo.UseModel(&models.SysLoginInfo{})

	tableName := _sysLoginInfo.sysLoginInfoDo.TableName()
	_sysLoginInfo.ALL = field.NewAsterisk(tableName)
	_sysLoginInfo.ID = field.NewInt64(tableName, "id")
	_sysLoginInfo.Username = field.NewString(tableName, "username")
	_sysLoginInfo.IP = field.NewString(tableName, "ip")
	_sysLoginInfo.LoginLocation = field.NewString(tableName, "login_location")
	_sysLoginInfo.Browser = field.NewString(tableName, "browser")
	_sysLoginInfo.Os = field.NewString(tableName, "os")
	_sysLoginInfo.Status = field.NewInt32(tableName, "status")
	_sysLoginInfo.Msg = field.NewString(tableName, "msg")
	_sysLoginInfo.LoginTime = field.NewTime(tableName, "login_time")

	_sysLoginInfo.fillFieldMap()

	return _sysLoginInfo
}

type sysLoginInfo struct {
	sysLoginInfoDo sysLoginInfoDo

	ALL           field.Asterisk
	ID            field.Int64  // 访问ID
	Username      field.String // 用户账号
	IP            field.String // 登录IP地址
	LoginLocation field.String // 登录地点
	Browser       field.String // 浏览器类型
	Os            field.String // 操作系统
	Status        field.Int32  // 登录状态（0成功 1失败）
	Msg           field.String // 提示消息
	LoginTime     field.Time   // 访问时间

	fieldMap map[string]field.Expr
}

func (s sysLoginInfo) Table(newTableName string) *sysLoginInfo {
	s.sysLoginInfoDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysLoginInfo) As(alias string) *sysLoginInfo {
	s.sysLoginInfoDo.DO = *(s.sysLoginInfoDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysLoginInfo) updateTableName(table string) *sysLoginInfo {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.Username = field.NewString(table, "username")
	s.IP = field.NewString(table, "ip")
	s.LoginLocation = field.NewString(table, "login_location")
	s.Browser = field.NewString(table, "browser")
	s.Os = field.NewString(table, "os")
	s.Status = field.NewInt32(table, "status")
	s.Msg = field.NewString(table, "msg")
	s.LoginTime = field.NewTime(table, "login_time")

	s.fillFieldMap()

	return s
}

func (s *sysLoginInfo) WithContext(ctx context.Context) *sysLoginInfoDo {
	return s.sysLoginInfoDo.WithContext(ctx)
}

func (s sysLoginInfo) TableName() string { return s.sysLoginInfoDo.TableName() }

func (s sysLoginInfo) Alias() string { return s.sysLoginInfoDo.Alias() }

func (s *sysLoginInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysLoginInfo) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 9)
	s.fieldMap["id"] = s.ID
	s.fieldMap["username"] = s.Username
	s.fieldMap["ip"] = s.IP
	s.fieldMap["login_location"] = s.LoginLocation
	s.fieldMap["browser"] = s.Browser
	s.fieldMap["os"] = s.Os
	s.fieldMap["status"] = s.Status
	s.fieldMap["msg"] = s.Msg
	s.fieldMap["login_time"] = s.LoginTime
}

func (s sysLoginInfo) clone(db *gorm.DB) sysLoginInfo {
	s.sysLoginInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysLoginInfo) replaceDB(db *gorm.DB) sysLoginInfo {
	s.sysLoginInfoDo.ReplaceDB(db)
	return s
}

type sysLoginInfoDo struct{ gen.DO }

func (s sysLoginInfoDo) Debug() *sysLoginInfoDo {
	return s.withDO(s.DO.Debug())
}

func (s sysLoginInfoDo) WithContext(ctx context.Context) *sysLoginInfoDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysLoginInfoDo) ReadDB() *sysLoginInfoDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysLoginInfoDo) WriteDB() *sysLoginInfoDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysLoginInfoDo) Session(config *gorm.Session) *sysLoginInfoDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysLoginInfoDo) Clauses(conds ...clause.Expression) *sysLoginInfoDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysLoginInfoDo) Returning(value interface{}, columns ...string) *sysLoginInfoDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysLoginInfoDo) Not(conds ...gen.Condition) *sysLoginInfoDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysLoginInfoDo) Or(conds ...gen.Condition) *sysLoginInfoDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysLoginInfoDo) Select(conds ...field.Expr) *sysLoginInfoDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysLoginInfoDo) Where(conds ...gen.Condition) *sysLoginInfoDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysLoginInfoDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *sysLoginInfoDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysLoginInfoDo) Order(conds ...field.Expr) *sysLoginInfoDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysLoginInfoDo) Distinct(cols ...field.Expr) *sysLoginInfoDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysLoginInfoDo) Omit(cols ...field.Expr) *sysLoginInfoDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysLoginInfoDo) Join(table schema.Tabler, on ...field.Expr) *sysLoginInfoDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysLoginInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) *sysLoginInfoDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysLoginInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) *sysLoginInfoDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysLoginInfoDo) Group(cols ...field.Expr) *sysLoginInfoDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysLoginInfoDo) Having(conds ...gen.Condition) *sysLoginInfoDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysLoginInfoDo) Limit(limit int) *sysLoginInfoDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysLoginInfoDo) Offset(offset int) *sysLoginInfoDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysLoginInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *sysLoginInfoDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysLoginInfoDo) Unscoped() *sysLoginInfoDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysLoginInfoDo) Create(values ...*models.SysLoginInfo) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysLoginInfoDo) CreateInBatches(values []*models.SysLoginInfo, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysLoginInfoDo) Save(values ...*models.SysLoginInfo) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysLoginInfoDo) First() (*models.SysLoginInfo, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.SysLoginInfo), nil
	}
}

func (s sysLoginInfoDo) Take() (*models.SysLoginInfo, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.SysLoginInfo), nil
	}
}

func (s sysLoginInfoDo) Last() (*models.SysLoginInfo, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.SysLoginInfo), nil
	}
}

func (s sysLoginInfoDo) Find() ([]*models.SysLoginInfo, error) {
	result, err := s.DO.Find()
	return result.([]*models.SysLoginInfo), err
}

func (s sysLoginInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.SysLoginInfo, err error) {
	buf := make([]*models.SysLoginInfo, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysLoginInfoDo) FindInBatches(result *[]*models.SysLoginInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysLoginInfoDo) Attrs(attrs ...field.AssignExpr) *sysLoginInfoDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysLoginInfoDo) Assign(attrs ...field.AssignExpr) *sysLoginInfoDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysLoginInfoDo) Joins(fields ...field.RelationField) *sysLoginInfoDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysLoginInfoDo) Preload(fields ...field.RelationField) *sysLoginInfoDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysLoginInfoDo) FirstOrInit() (*models.SysLoginInfo, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.SysLoginInfo), nil
	}
}

func (s sysLoginInfoDo) FirstOrCreate() (*models.SysLoginInfo, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.SysLoginInfo), nil
	}
}

func (s sysLoginInfoDo) FindByPage(offset int, limit int) (result []*models.SysLoginInfo, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysLoginInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysLoginInfoDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysLoginInfoDo) Delete(models ...*models.SysLoginInfo) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysLoginInfoDo) withDO(do gen.Dao) *sysLoginInfoDo {
	s.DO = *do.(*gen.DO)
	return s
}
