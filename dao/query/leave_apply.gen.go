// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"github.com/pwh-pwh/Epidemic-prevention-System/models"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newLeaveApply(db *gorm.DB, opts ...gen.DOOption) leaveApply {
	_leaveApply := leaveApply{}

	_leaveApply.leaveApplyDo.UseDB(db, opts...)
	_leaveApply.leaveApplyDo.UseModel(&models.LeaveApply{})

	tableName := _leaveApply.leaveApplyDo.TableName()
	_leaveApply.ALL = field.NewAsterisk(tableName)
	_leaveApply.ID = field.NewInt64(tableName, "id")
	_leaveApply.Username = field.NewString(tableName, "username")
	_leaveApply.DeptID = field.NewInt64(tableName, "dept_id")
	_leaveApply.Reason = field.NewString(tableName, "reason")
	_leaveApply.LeaveType = field.NewInt32(tableName, "leave_type")
	_leaveApply.Status = field.NewInt32(tableName, "status")
	_leaveApply.StudentType = field.NewInt32(tableName, "student_type")
	_leaveApply.Nickname = field.NewString(tableName, "nickname")
	_leaveApply.Time = field.NewString(tableName, "time")
	_leaveApply.Day = field.NewString(tableName, "day")
	_leaveApply.Address = field.NewString(tableName, "address")
	_leaveApply.Traffic = field.NewString(tableName, "traffic")
	_leaveApply.Clazz = field.NewInt32(tableName, "clazz")
	_leaveApply.Dormitory = field.NewString(tableName, "dormitory")
	_leaveApply.PhoneNumber = field.NewString(tableName, "phone_number")
	_leaveApply.Exam = field.NewInt32(tableName, "exam")
	_leaveApply.Opinion = field.NewString(tableName, "opinion")
	_leaveApply.CreateTime = field.NewTime(tableName, "create_time")
	_leaveApply.UpdateTime = field.NewTime(tableName, "update_time")
	_leaveApply.IsDelete = field.NewInt32(tableName, "is_delete")

	_leaveApply.fillFieldMap()

	return _leaveApply
}

type leaveApply struct {
	leaveApplyDo leaveApplyDo

	ALL         field.Asterisk
	ID          field.Int64  // 主键id
	Username    field.String // 用户名
	DeptID      field.Int64  // 部门id
	Reason      field.String // 请假原因
	LeaveType   field.Int32  // 请假类型（1：事假 2：病假）
	Status      field.Int32  // 状态（0：撤销 1：待审核 2：审核通过 3：审核不通过）
	StudentType field.Int32  // 学生类型（1：本科生 2：研究生 3：博士生）
	Nickname    field.String // 学生姓名
	Time        field.String // 请假时间区间
	Day         field.String // 请假天数
	Address     field.String // 目的地
	Traffic     field.String // 交通工具
	Clazz       field.Int32  // 是否有课程（1：没有 0：有）
	Dormitory   field.String // 宿舍
	PhoneNumber field.String // 手机号码
	Exam        field.Int32  // 考试（1：没有 0：有）
	Opinion     field.String // 审核意见
	CreateTime  field.Time   // 创建时间
	UpdateTime  field.Time   // 更新时间
	IsDelete    field.Int32  // 逻辑删除

	fieldMap map[string]field.Expr
}

func (l leaveApply) Table(newTableName string) *leaveApply {
	l.leaveApplyDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l leaveApply) As(alias string) *leaveApply {
	l.leaveApplyDo.DO = *(l.leaveApplyDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *leaveApply) updateTableName(table string) *leaveApply {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt64(table, "id")
	l.Username = field.NewString(table, "username")
	l.DeptID = field.NewInt64(table, "dept_id")
	l.Reason = field.NewString(table, "reason")
	l.LeaveType = field.NewInt32(table, "leave_type")
	l.Status = field.NewInt32(table, "status")
	l.StudentType = field.NewInt32(table, "student_type")
	l.Nickname = field.NewString(table, "nickname")
	l.Time = field.NewString(table, "time")
	l.Day = field.NewString(table, "day")
	l.Address = field.NewString(table, "address")
	l.Traffic = field.NewString(table, "traffic")
	l.Clazz = field.NewInt32(table, "clazz")
	l.Dormitory = field.NewString(table, "dormitory")
	l.PhoneNumber = field.NewString(table, "phone_number")
	l.Exam = field.NewInt32(table, "exam")
	l.Opinion = field.NewString(table, "opinion")
	l.CreateTime = field.NewTime(table, "create_time")
	l.UpdateTime = field.NewTime(table, "update_time")
	l.IsDelete = field.NewInt32(table, "is_delete")

	l.fillFieldMap()

	return l
}

func (l *leaveApply) WithContext(ctx context.Context) *leaveApplyDo {
	return l.leaveApplyDo.WithContext(ctx)
}

func (l leaveApply) TableName() string { return l.leaveApplyDo.TableName() }

func (l leaveApply) Alias() string { return l.leaveApplyDo.Alias() }

func (l *leaveApply) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *leaveApply) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 20)
	l.fieldMap["id"] = l.ID
	l.fieldMap["username"] = l.Username
	l.fieldMap["dept_id"] = l.DeptID
	l.fieldMap["reason"] = l.Reason
	l.fieldMap["leave_type"] = l.LeaveType
	l.fieldMap["status"] = l.Status
	l.fieldMap["student_type"] = l.StudentType
	l.fieldMap["nickname"] = l.Nickname
	l.fieldMap["time"] = l.Time
	l.fieldMap["day"] = l.Day
	l.fieldMap["address"] = l.Address
	l.fieldMap["traffic"] = l.Traffic
	l.fieldMap["clazz"] = l.Clazz
	l.fieldMap["dormitory"] = l.Dormitory
	l.fieldMap["phone_number"] = l.PhoneNumber
	l.fieldMap["exam"] = l.Exam
	l.fieldMap["opinion"] = l.Opinion
	l.fieldMap["create_time"] = l.CreateTime
	l.fieldMap["update_time"] = l.UpdateTime
	l.fieldMap["is_delete"] = l.IsDelete
}

func (l leaveApply) clone(db *gorm.DB) leaveApply {
	l.leaveApplyDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l leaveApply) replaceDB(db *gorm.DB) leaveApply {
	l.leaveApplyDo.ReplaceDB(db)
	return l
}

type leaveApplyDo struct{ gen.DO }

func (l leaveApplyDo) Debug() *leaveApplyDo {
	return l.withDO(l.DO.Debug())
}

func (l leaveApplyDo) WithContext(ctx context.Context) *leaveApplyDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l leaveApplyDo) ReadDB() *leaveApplyDo {
	return l.Clauses(dbresolver.Read)
}

func (l leaveApplyDo) WriteDB() *leaveApplyDo {
	return l.Clauses(dbresolver.Write)
}

func (l leaveApplyDo) Session(config *gorm.Session) *leaveApplyDo {
	return l.withDO(l.DO.Session(config))
}

func (l leaveApplyDo) Clauses(conds ...clause.Expression) *leaveApplyDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l leaveApplyDo) Returning(value interface{}, columns ...string) *leaveApplyDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l leaveApplyDo) Not(conds ...gen.Condition) *leaveApplyDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l leaveApplyDo) Or(conds ...gen.Condition) *leaveApplyDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l leaveApplyDo) Select(conds ...field.Expr) *leaveApplyDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l leaveApplyDo) Where(conds ...gen.Condition) *leaveApplyDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l leaveApplyDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *leaveApplyDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l leaveApplyDo) Order(conds ...field.Expr) *leaveApplyDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l leaveApplyDo) Distinct(cols ...field.Expr) *leaveApplyDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l leaveApplyDo) Omit(cols ...field.Expr) *leaveApplyDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l leaveApplyDo) Join(table schema.Tabler, on ...field.Expr) *leaveApplyDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l leaveApplyDo) LeftJoin(table schema.Tabler, on ...field.Expr) *leaveApplyDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l leaveApplyDo) RightJoin(table schema.Tabler, on ...field.Expr) *leaveApplyDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l leaveApplyDo) Group(cols ...field.Expr) *leaveApplyDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l leaveApplyDo) Having(conds ...gen.Condition) *leaveApplyDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l leaveApplyDo) Limit(limit int) *leaveApplyDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l leaveApplyDo) Offset(offset int) *leaveApplyDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l leaveApplyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *leaveApplyDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l leaveApplyDo) Unscoped() *leaveApplyDo {
	return l.withDO(l.DO.Unscoped())
}

func (l leaveApplyDo) Create(values ...*models.LeaveApply) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l leaveApplyDo) CreateInBatches(values []*models.LeaveApply, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l leaveApplyDo) Save(values ...*models.LeaveApply) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l leaveApplyDo) First() (*models.LeaveApply, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.LeaveApply), nil
	}
}

func (l leaveApplyDo) Take() (*models.LeaveApply, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.LeaveApply), nil
	}
}

func (l leaveApplyDo) Last() (*models.LeaveApply, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.LeaveApply), nil
	}
}

func (l leaveApplyDo) Find() ([]*models.LeaveApply, error) {
	result, err := l.DO.Find()
	return result.([]*models.LeaveApply), err
}

func (l leaveApplyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.LeaveApply, err error) {
	buf := make([]*models.LeaveApply, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l leaveApplyDo) FindInBatches(result *[]*models.LeaveApply, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l leaveApplyDo) Attrs(attrs ...field.AssignExpr) *leaveApplyDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l leaveApplyDo) Assign(attrs ...field.AssignExpr) *leaveApplyDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l leaveApplyDo) Joins(fields ...field.RelationField) *leaveApplyDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l leaveApplyDo) Preload(fields ...field.RelationField) *leaveApplyDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l leaveApplyDo) FirstOrInit() (*models.LeaveApply, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.LeaveApply), nil
	}
}

func (l leaveApplyDo) FirstOrCreate() (*models.LeaveApply, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.LeaveApply), nil
	}
}

func (l leaveApplyDo) FindByPage(offset int, limit int) (result []*models.LeaveApply, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l leaveApplyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l leaveApplyDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l leaveApplyDo) Delete(models ...*models.LeaveApply) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *leaveApplyDo) withDO(do gen.Dao) *leaveApplyDo {
	l.DO = *do.(*gen.DO)
	return l
}
