// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/pwh-pwh/Epidemic-prevention-System/dao/models"
)

func newHealthClock(db *gorm.DB, opts ...gen.DOOption) healthClock {
	_healthClock := healthClock{}

	_healthClock.healthClockDo.UseDB(db, opts...)
	_healthClock.healthClockDo.UseModel(&models.HealthClock{})

	tableName := _healthClock.healthClockDo.TableName()
	_healthClock.ALL = field.NewAsterisk(tableName)
	_healthClock.ID = field.NewInt64(tableName, "id")
	_healthClock.Username = field.NewString(tableName, "username")
	_healthClock.HealthType = field.NewInt32(tableName, "health_type")
	_healthClock.Temperature = field.NewFloat32(tableName, "temperature")
	_healthClock.MiddleHigh = field.NewInt32(tableName, "middle_high")
	_healthClock.Diagnosis = field.NewInt32(tableName, "diagnosis")
	_healthClock.ReturnInfo = field.NewInt32(tableName, "return_info")
	_healthClock.Address = field.NewString(tableName, "address")
	_healthClock.CreateTime = field.NewTime(tableName, "create_time")
	_healthClock.UpdateTime = field.NewTime(tableName, "update_time")
	_healthClock.DeptID = field.NewInt32(tableName, "dept_id")
	_healthClock.IsDelete = field.NewInt32(tableName, "is_delete")

	_healthClock.fillFieldMap()

	return _healthClock
}

type healthClock struct {
	healthClockDo healthClockDo

	ALL         field.Asterisk
	ID          field.Int64   // 打卡id
	Username    field.String  // 姓名
	HealthType  field.Int32   // 健康状况
	Temperature field.Float32 // 温度
	MiddleHigh  field.Int32   // 中高风险
	Diagnosis   field.Int32   // 确诊
	ReturnInfo  field.Int32   // 境外返回
	Address     field.String  // 地址
	CreateTime  field.Time    // 创建时间
	UpdateTime  field.Time    // 更新时间
	DeptID      field.Int32   // 部门id
	IsDelete    field.Int32   // 逻辑删除

	fieldMap map[string]field.Expr
}

func (h healthClock) Table(newTableName string) *healthClock {
	h.healthClockDo.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h healthClock) As(alias string) *healthClock {
	h.healthClockDo.DO = *(h.healthClockDo.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *healthClock) updateTableName(table string) *healthClock {
	h.ALL = field.NewAsterisk(table)
	h.ID = field.NewInt64(table, "id")
	h.Username = field.NewString(table, "username")
	h.HealthType = field.NewInt32(table, "health_type")
	h.Temperature = field.NewFloat32(table, "temperature")
	h.MiddleHigh = field.NewInt32(table, "middle_high")
	h.Diagnosis = field.NewInt32(table, "diagnosis")
	h.ReturnInfo = field.NewInt32(table, "return_info")
	h.Address = field.NewString(table, "address")
	h.CreateTime = field.NewTime(table, "create_time")
	h.UpdateTime = field.NewTime(table, "update_time")
	h.DeptID = field.NewInt32(table, "dept_id")
	h.IsDelete = field.NewInt32(table, "is_delete")

	h.fillFieldMap()

	return h
}

func (h *healthClock) WithContext(ctx context.Context) *healthClockDo {
	return h.healthClockDo.WithContext(ctx)
}

func (h healthClock) TableName() string { return h.healthClockDo.TableName() }

func (h healthClock) Alias() string { return h.healthClockDo.Alias() }

func (h *healthClock) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *healthClock) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 12)
	h.fieldMap["id"] = h.ID
	h.fieldMap["username"] = h.Username
	h.fieldMap["health_type"] = h.HealthType
	h.fieldMap["temperature"] = h.Temperature
	h.fieldMap["middle_high"] = h.MiddleHigh
	h.fieldMap["diagnosis"] = h.Diagnosis
	h.fieldMap["return_info"] = h.ReturnInfo
	h.fieldMap["address"] = h.Address
	h.fieldMap["create_time"] = h.CreateTime
	h.fieldMap["update_time"] = h.UpdateTime
	h.fieldMap["dept_id"] = h.DeptID
	h.fieldMap["is_delete"] = h.IsDelete
}

func (h healthClock) clone(db *gorm.DB) healthClock {
	h.healthClockDo.ReplaceConnPool(db.Statement.ConnPool)
	return h
}

func (h healthClock) replaceDB(db *gorm.DB) healthClock {
	h.healthClockDo.ReplaceDB(db)
	return h
}

type healthClockDo struct{ gen.DO }

func (h healthClockDo) Debug() *healthClockDo {
	return h.withDO(h.DO.Debug())
}

func (h healthClockDo) WithContext(ctx context.Context) *healthClockDo {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h healthClockDo) ReadDB() *healthClockDo {
	return h.Clauses(dbresolver.Read)
}

func (h healthClockDo) WriteDB() *healthClockDo {
	return h.Clauses(dbresolver.Write)
}

func (h healthClockDo) Session(config *gorm.Session) *healthClockDo {
	return h.withDO(h.DO.Session(config))
}

func (h healthClockDo) Clauses(conds ...clause.Expression) *healthClockDo {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h healthClockDo) Returning(value interface{}, columns ...string) *healthClockDo {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h healthClockDo) Not(conds ...gen.Condition) *healthClockDo {
	return h.withDO(h.DO.Not(conds...))
}

func (h healthClockDo) Or(conds ...gen.Condition) *healthClockDo {
	return h.withDO(h.DO.Or(conds...))
}

func (h healthClockDo) Select(conds ...field.Expr) *healthClockDo {
	return h.withDO(h.DO.Select(conds...))
}

func (h healthClockDo) Where(conds ...gen.Condition) *healthClockDo {
	return h.withDO(h.DO.Where(conds...))
}

func (h healthClockDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *healthClockDo {
	return h.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (h healthClockDo) Order(conds ...field.Expr) *healthClockDo {
	return h.withDO(h.DO.Order(conds...))
}

func (h healthClockDo) Distinct(cols ...field.Expr) *healthClockDo {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h healthClockDo) Omit(cols ...field.Expr) *healthClockDo {
	return h.withDO(h.DO.Omit(cols...))
}

func (h healthClockDo) Join(table schema.Tabler, on ...field.Expr) *healthClockDo {
	return h.withDO(h.DO.Join(table, on...))
}

func (h healthClockDo) LeftJoin(table schema.Tabler, on ...field.Expr) *healthClockDo {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h healthClockDo) RightJoin(table schema.Tabler, on ...field.Expr) *healthClockDo {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h healthClockDo) Group(cols ...field.Expr) *healthClockDo {
	return h.withDO(h.DO.Group(cols...))
}

func (h healthClockDo) Having(conds ...gen.Condition) *healthClockDo {
	return h.withDO(h.DO.Having(conds...))
}

func (h healthClockDo) Limit(limit int) *healthClockDo {
	return h.withDO(h.DO.Limit(limit))
}

func (h healthClockDo) Offset(offset int) *healthClockDo {
	return h.withDO(h.DO.Offset(offset))
}

func (h healthClockDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *healthClockDo {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h healthClockDo) Unscoped() *healthClockDo {
	return h.withDO(h.DO.Unscoped())
}

func (h healthClockDo) Create(values ...*models.HealthClock) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h healthClockDo) CreateInBatches(values []*models.HealthClock, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h healthClockDo) Save(values ...*models.HealthClock) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h healthClockDo) First() (*models.HealthClock, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.HealthClock), nil
	}
}

func (h healthClockDo) Take() (*models.HealthClock, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.HealthClock), nil
	}
}

func (h healthClockDo) Last() (*models.HealthClock, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.HealthClock), nil
	}
}

func (h healthClockDo) Find() ([]*models.HealthClock, error) {
	result, err := h.DO.Find()
	return result.([]*models.HealthClock), err
}

func (h healthClockDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.HealthClock, err error) {
	buf := make([]*models.HealthClock, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h healthClockDo) FindInBatches(result *[]*models.HealthClock, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h healthClockDo) Attrs(attrs ...field.AssignExpr) *healthClockDo {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h healthClockDo) Assign(attrs ...field.AssignExpr) *healthClockDo {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h healthClockDo) Joins(fields ...field.RelationField) *healthClockDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h healthClockDo) Preload(fields ...field.RelationField) *healthClockDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h healthClockDo) FirstOrInit() (*models.HealthClock, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.HealthClock), nil
	}
}

func (h healthClockDo) FirstOrCreate() (*models.HealthClock, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.HealthClock), nil
	}
}

func (h healthClockDo) FindByPage(offset int, limit int) (result []*models.HealthClock, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h healthClockDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h healthClockDo) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h healthClockDo) Delete(models ...*models.HealthClock) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *healthClockDo) withDO(do gen.Dao) *healthClockDo {
	h.DO = *do.(*gen.DO)
	return h
}
