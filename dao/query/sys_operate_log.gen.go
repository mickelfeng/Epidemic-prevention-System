// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/pwh-pwh/Epidemic-prevention-System/dao/models"
)

func newSysOperateLog(db *gorm.DB, opts ...gen.DOOption) sysOperateLog {
	_sysOperateLog := sysOperateLog{}

	_sysOperateLog.sysOperateLogDo.UseDB(db, opts...)
	_sysOperateLog.sysOperateLogDo.UseModel(&models.SysOperateLog{})

	tableName := _sysOperateLog.sysOperateLogDo.TableName()
	_sysOperateLog.ALL = field.NewAsterisk(tableName)
	_sysOperateLog.ID = field.NewInt64(tableName, "id")
	_sysOperateLog.Title = field.NewString(tableName, "title")
	_sysOperateLog.BusinessType = field.NewString(tableName, "business_type")
	_sysOperateLog.Method = field.NewString(tableName, "method")
	_sysOperateLog.RequestMethod = field.NewString(tableName, "request_method")
	_sysOperateLog.OperURL = field.NewString(tableName, "oper_url")
	_sysOperateLog.OperIP = field.NewString(tableName, "oper_ip")
	_sysOperateLog.OperLocation = field.NewString(tableName, "oper_location")
	_sysOperateLog.OperParam = field.NewString(tableName, "oper_param")
	_sysOperateLog.OperName = field.NewString(tableName, "oper_name")
	_sysOperateLog.JSONResult = field.NewString(tableName, "json_result")
	_sysOperateLog.Status = field.NewInt32(tableName, "status")
	_sysOperateLog.ErrorMsg = field.NewString(tableName, "error_msg")
	_sysOperateLog.OperTime = field.NewTime(tableName, "oper_time")

	_sysOperateLog.fillFieldMap()

	return _sysOperateLog
}

type sysOperateLog struct {
	sysOperateLogDo sysOperateLogDo

	ALL           field.Asterisk
	ID            field.Int64  // 日志主键
	Title         field.String // 模块标题
	BusinessType  field.String // 业务类型
	Method        field.String // 方法名称
	RequestMethod field.String // 请求方式
	OperURL       field.String // 请求URL
	OperIP        field.String // 主机地址
	OperLocation  field.String // 操作地点
	OperParam     field.String // 请求参数
	OperName      field.String // 操作人
	JSONResult    field.String // 返回参数
	Status        field.Int32  // 操作状态（1正常 0异常）
	ErrorMsg      field.String // 错误消息
	OperTime      field.Time   // 操作时间

	fieldMap map[string]field.Expr
}

func (s sysOperateLog) Table(newTableName string) *sysOperateLog {
	s.sysOperateLogDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysOperateLog) As(alias string) *sysOperateLog {
	s.sysOperateLogDo.DO = *(s.sysOperateLogDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysOperateLog) updateTableName(table string) *sysOperateLog {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.Title = field.NewString(table, "title")
	s.BusinessType = field.NewString(table, "business_type")
	s.Method = field.NewString(table, "method")
	s.RequestMethod = field.NewString(table, "request_method")
	s.OperURL = field.NewString(table, "oper_url")
	s.OperIP = field.NewString(table, "oper_ip")
	s.OperLocation = field.NewString(table, "oper_location")
	s.OperParam = field.NewString(table, "oper_param")
	s.OperName = field.NewString(table, "oper_name")
	s.JSONResult = field.NewString(table, "json_result")
	s.Status = field.NewInt32(table, "status")
	s.ErrorMsg = field.NewString(table, "error_msg")
	s.OperTime = field.NewTime(table, "oper_time")

	s.fillFieldMap()

	return s
}

func (s *sysOperateLog) WithContext(ctx context.Context) *sysOperateLogDo {
	return s.sysOperateLogDo.WithContext(ctx)
}

func (s sysOperateLog) TableName() string { return s.sysOperateLogDo.TableName() }

func (s sysOperateLog) Alias() string { return s.sysOperateLogDo.Alias() }

func (s *sysOperateLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysOperateLog) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 14)
	s.fieldMap["id"] = s.ID
	s.fieldMap["title"] = s.Title
	s.fieldMap["business_type"] = s.BusinessType
	s.fieldMap["method"] = s.Method
	s.fieldMap["request_method"] = s.RequestMethod
	s.fieldMap["oper_url"] = s.OperURL
	s.fieldMap["oper_ip"] = s.OperIP
	s.fieldMap["oper_location"] = s.OperLocation
	s.fieldMap["oper_param"] = s.OperParam
	s.fieldMap["oper_name"] = s.OperName
	s.fieldMap["json_result"] = s.JSONResult
	s.fieldMap["status"] = s.Status
	s.fieldMap["error_msg"] = s.ErrorMsg
	s.fieldMap["oper_time"] = s.OperTime
}

func (s sysOperateLog) clone(db *gorm.DB) sysOperateLog {
	s.sysOperateLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysOperateLog) replaceDB(db *gorm.DB) sysOperateLog {
	s.sysOperateLogDo.ReplaceDB(db)
	return s
}

type sysOperateLogDo struct{ gen.DO }

func (s sysOperateLogDo) Debug() *sysOperateLogDo {
	return s.withDO(s.DO.Debug())
}

func (s sysOperateLogDo) WithContext(ctx context.Context) *sysOperateLogDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysOperateLogDo) ReadDB() *sysOperateLogDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysOperateLogDo) WriteDB() *sysOperateLogDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysOperateLogDo) Session(config *gorm.Session) *sysOperateLogDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysOperateLogDo) Clauses(conds ...clause.Expression) *sysOperateLogDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysOperateLogDo) Returning(value interface{}, columns ...string) *sysOperateLogDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysOperateLogDo) Not(conds ...gen.Condition) *sysOperateLogDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysOperateLogDo) Or(conds ...gen.Condition) *sysOperateLogDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysOperateLogDo) Select(conds ...field.Expr) *sysOperateLogDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysOperateLogDo) Where(conds ...gen.Condition) *sysOperateLogDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysOperateLogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *sysOperateLogDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysOperateLogDo) Order(conds ...field.Expr) *sysOperateLogDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysOperateLogDo) Distinct(cols ...field.Expr) *sysOperateLogDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysOperateLogDo) Omit(cols ...field.Expr) *sysOperateLogDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysOperateLogDo) Join(table schema.Tabler, on ...field.Expr) *sysOperateLogDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysOperateLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) *sysOperateLogDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysOperateLogDo) RightJoin(table schema.Tabler, on ...field.Expr) *sysOperateLogDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysOperateLogDo) Group(cols ...field.Expr) *sysOperateLogDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysOperateLogDo) Having(conds ...gen.Condition) *sysOperateLogDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysOperateLogDo) Limit(limit int) *sysOperateLogDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysOperateLogDo) Offset(offset int) *sysOperateLogDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysOperateLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *sysOperateLogDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysOperateLogDo) Unscoped() *sysOperateLogDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysOperateLogDo) Create(values ...*models.SysOperateLog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysOperateLogDo) CreateInBatches(values []*models.SysOperateLog, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysOperateLogDo) Save(values ...*models.SysOperateLog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysOperateLogDo) First() (*models.SysOperateLog, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.SysOperateLog), nil
	}
}

func (s sysOperateLogDo) Take() (*models.SysOperateLog, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.SysOperateLog), nil
	}
}

func (s sysOperateLogDo) Last() (*models.SysOperateLog, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.SysOperateLog), nil
	}
}

func (s sysOperateLogDo) Find() ([]*models.SysOperateLog, error) {
	result, err := s.DO.Find()
	return result.([]*models.SysOperateLog), err
}

func (s sysOperateLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.SysOperateLog, err error) {
	buf := make([]*models.SysOperateLog, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysOperateLogDo) FindInBatches(result *[]*models.SysOperateLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysOperateLogDo) Attrs(attrs ...field.AssignExpr) *sysOperateLogDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysOperateLogDo) Assign(attrs ...field.AssignExpr) *sysOperateLogDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysOperateLogDo) Joins(fields ...field.RelationField) *sysOperateLogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysOperateLogDo) Preload(fields ...field.RelationField) *sysOperateLogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysOperateLogDo) FirstOrInit() (*models.SysOperateLog, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.SysOperateLog), nil
	}
}

func (s sysOperateLogDo) FirstOrCreate() (*models.SysOperateLog, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.SysOperateLog), nil
	}
}

func (s sysOperateLogDo) FindByPage(offset int, limit int) (result []*models.SysOperateLog, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysOperateLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysOperateLogDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysOperateLogDo) Delete(models ...*models.SysOperateLog) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysOperateLogDo) withDO(do gen.Dao) *sysOperateLogDo {
	s.DO = *do.(*gen.DO)
	return s
}
